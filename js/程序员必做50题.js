1.有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？
//三次循环
//第一层循环决定第一位,count保存总数
for(var i=1,count=0;i<=4;i++){
	//第二层循环决定第二个数
	for(var k=1;k<=4;k++){
		//第三层循环决定第三个数
		for(var j=1,str;j<=4;j++){
			if(i!==k && k!==j && i!==j){
				//将数字转换为字符串
				var a=i.toString(),b=k.toString(),c=j.toString;
				str=a+b+c;
				console.log(str);
				count++;
			};
		};
	};

}
console.log(count);
//延伸由四个不同的数字组成，比如 1，5，7，8
//设置数组保存四个数字
var arry=[1,5,7,8];
//循环,i,j,k代表下数组下标,循环次数为数组的长度
for(var i=0,count=0;i<arry.length;i++){
	for(var j=0;j<arry.length;j++){
		for(var k=0;k<arry.length;k++){    
			var str;
			if(arry[i]!==arry[j] && arry[i]!==arry[k] && arry[j]!==arry[k]){
				//str+=arry[i]+arry[j]+arry[k]; +=赋值预算是右关联,而且+比+=优先级高,就会先计算后面再赋值
				str=''+arry[i]+arry[j]+arry[k];
				console.log(arry[i],arry[j],arry[k],str);    
				count++;
			};     
		};
	};
};
console.log(count);

2.企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？
//设置变量利润i,并设定一个初始值
var i = prompt('利润');
var ti;
//每个阶段的提成,十万元
var t1 = 100000 * 0.1;
//大于10万低于二十万
var t2 = t1 + 100000 * 0.075;
//大于20低于40
var t3 = t2 + 200000 * 0.05;
//大于40小于60
var t4 = t3 + 200000 * 0.03;
//大于60小于100
var t5 = t4 + 400000 * 0.015;
//判断利润在哪个区间
if (i <= 100000) {
	//提成
	ti = i * 0.1;
}else if (i <= 200000) {
	ti = t1 + (i - 100000) * 0.075;
}else if (i <= 400000) {
	ti = t2 + (i - 200000) * 0.05;
}else if (i <= 600000) {
	ti = t3 + (i - 400000) * 0.03;
}else if (i <= 1000000) {
	ti = t4 + (i - 600000) * 0.015;
}else {
	ti = t5 + (i - 1000000) * 0.001;     
}

alert(ti);  

3.一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？
/*
思考:
1.完全平方数 就是它的平方根是一个整数 , 完全平方数必须是整数
2.使用循环,判断一个区间的数是否是完全平方数
3.区间:
最小值:加上100是完全平方数,所以这个数必须大于-99才能是整数
最大值:
4.是否是完全平方数: 一个数的平方根取整的平方还等于原来那个数,证明它的平方根是整数,所以它是完全平方数
*/
//求平方根 Math.sqrt()
//完全平方数必须是整数,所以只能从-99开始,然后两个相邻的数的平方相减大于168的话的也不能满足条件
var a=1;
do{
	a++;
}while(((a+1)*(a+1)-a*a)<=168)  
console.log((a+1)*(a+1));//最大值为7225
//设置循环,声明两个数为a,b的平方为i+100 和i+168
for(var i=-99,a,b;i<=7225;i++){
	//平方根取整的平方也等于原来的数的话就是完全平数
	a=parseInt(Math.sqrt(i+100));
	b=parseInt(Math.sqrt(i+100+168));
	if((a*a===(i+100)) && (b*b===(i+268))){
		console.log(i);
	}
}

4.输入某年某月某日，判断这一天是这一年的第几天？
//声明两个数组,每个月的天数为元素,r为闰年,p为平年.
var r=[31,29,31,30,31,30,31,31,30,31,30,31];
var p=[31,28,31,30,31,30,31,31,30,31,30,31];
//单独输入年月日,因为不知道怎么截取字符串中特定的数字
var year=2020,month=8,day=6;
//首先判断是不是闰年
if(year%4===0 && year%100!==0 || year%400===0){
	//天数=(month-1)总天数+day
	for(var i=0,sum=0;i<month-2;i++){
		sum+=r[i];
	}
	sum+=day;
	console.log(sum);
}else{
	for(var i=0,sum=0;i<month-2;i++){
		sum+=p[i];
	}
	sum+=day;   
	console.log(sum);
}

5.输入三个整数x,y,z，请把这三个数由小到大输出。
//输入三个整数x,y,z，请把这三个数由小到大输出。
var x = prompt('请输入整数');
var y = prompt('请输入整数');
var z = prompt('请输入整数');
//判断大小,用冒泡排序
//讲x,y,z加入数组
var arry = [];
//将数字加入到数组最后一个元素输入的是字符串,要转换成数字
arry.push(Number(x));
arry.push(Number(y));
arry.push(Number(z));
//使用冒泡排序
for (var i = 1; i < arry.length; i++) {
	for (var j = 0, tmp; j < arry.length - i; j++) {
		if (arry[j] > arry[j+1]) {
			tmp = arry[j];
			arry[j] = arry[j+1];
			arry[j+1] = tmp;
		}
	}
}    
//输出
console.log(arry[0], arry[1], arry[2]);

6.用* 输出 c的图案.
console.log('    **');
console.log('  *');
console.log('  *');
console.log('    **');

7.将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。
//一个正整数的最小质因数不会超过它的平方根 
//从最小能整除的数,一直到数字本身,不用到数字本身,如果一个数字到他的一半还不可以整除,就是质数
var num = 1024;
var str = '';

for (var i = 2; i <= num/2; i ++) {
	//从2开始找最小质因数,找到以后数字除以当前数,又继续找,直到最后一个数之前
	while (num % i === 0 && num !== i) {
		num /= i;
		str += i + '*';
		console.log(i,str);
	}
	//最后一个数
	if(num === i){
		str += i;
	}
}
console.log(str);
//另一种解法
function haha(number){
	var max = number/2, str=''; 
	for (var i=2; i<=max; i++ ){ //此处应该使用<= 还是< 比如14 最大的可以整除的数是7 所以用小于等于
		console.log('i is '+i);          
		while (number % i === 0) {
			if (number !== i){	
				number /= i;
				str += i+'*';
				console.log(number,str);
			} else  if(number === i){  //当最后一个数时后面就不用再加*号了.
				str += i;
				return str;
			}
				         
		}
	}  
	//如果到最后都没有找到可以整除的数,返回1*它本身
	//一个数的最小质因数不会超过它的平方根
	if (str === '')
	{
		return '1*' + number;
	}
}
console.log(haha(14));



8.输出9*9口诀。
//设置外循环,打印九行
//设置内循环,打印当前行的数据
for ( var i = 1; i <= 9; i ++ ) {
	for ( var j = 1, str = ''; j <= i; j ++ ) {
		str += i + '*' + j + '=' + i * j + ' ';
	} 
	console.log ( str );  
}

9.要求输出国际象棋棋盘。
//国际象棋是8X8的正方形棋盘,第一行是白黑白黑,第二行是黑白黑白这样
//使用循环控制打印8行,偶数行打印白黑白黑,奇数行打印黑白
//使用两个循环.外部循环打8行,内部循环设定每行怎么打印
//不知道怎么打印白色和黑色的方块,暂时用两个空格和黑字代替
//第一行  白 黑 白 黑 白 黑 白 黑
//    1    1  2  3  4  5  6  7  8
//第二行  黑 白 黑 白 黑 白 黑 白 
//    2    1  2  3  4  5  6  7  8
//可以看到外循环的i 和 j 的和为偶数的时候是白,奇数的时候是黑
for (var i=1; i<=8; i++) {
	for (var j=1, str=''; j<=8; j++)
		if ((i+j) % 2 === 0) {
			str += '  ';
		} else {
			str += '黑';    
		} 
	
	console.log(str);
}

10.古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？
//兔子问题,给每个兔子后面加一个(月),月从0,1,到2就变成可生育兔子,不再加(),并每个月生一个1(0),
//第1月		第2月		第3月		第4月			第5月				第6月
//1(0)		1(1)		1+1(0)		1+1(0)+1(1)		1+1(0)+1(1)+1+1(0)  1+1(0)+1(1)+1+1(0)+1+1(0)+1(1)
//  1		1			2				3				5					8
//是斐波拉契数列, 第一项和第二项是1 ,从第三项开始, 每一项是前两项的和
//方法1:
//使用循环, 因为第三项的值和前两项有关, 设置 n1 和 n2 值为1, 使用 n1 和 n2 依次向后面移动, 当前位置 n1 的// 值是上一次 n2 的值, n2的值是上一次的 n1 + n2 ,
function fi(n) {
	//第1项和第2项的值都是1
	var n1=1 ,n2=1;
	for (var i=3, n1=1, n2=1, tmp; i<=n; i++) {
		tmp = n1;
		n1 = n2;
		n2 = tmp + n2;
	}
	return n2;
}

//方法2:
//使用递归
function fi2(n) {
	if (n===1 || n===2) {
		return 1;
	}
	return fi2(n-1) + fi2(n-2);
}
//调用函数
console.log(fi(5), fi2(5));

11.判断101-200之间有多少个素数，并输出所有素数。
/*
思考:
1.素数是什么: 除了1和它本身不能被其它数整除的数, 不包含1, 和质数相似
2.使用循环, 判断当前数是否是素数, 如果是打印出来, 数量加1,
3.节省资源, 减少循环次数, 考虑是否不用循环到它自身
4.一个数如果能被整除,它最小能整除的数必然小于等于它的平方根Math.sqrt()
*/
//创建函数判断当前数是否是素数
function isSu(n) {
	//如果有数可以整除就不是素数
	for (var i=2; i<=Math.sqrt(n); i++) {    
		if (n % i ===0) {
			return false;
		}
	}
	return true;
}

for (var i=101, count=0; i<=200; i++) {
	if (isSu(i)) {
		console.log(i);        
		count++;
	}
}

console.log(count);
  
12.打印出所有的“水仙花数”，所谓“水仙花数”是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个“水仙花数”，因为153=1的三次方＋5的三次方＋3的三次方。
/*
1.将153拆分开百位, 十位, 个位数
百位通过/100然后取整可以得到,
十位可以首先%100得到53然后再/10 再取整
个位可以同过%10就可以直接得到
2.然后再进行计算,所有的水仙花数涉及到一个区间 100 -999吧 
*/
for (var i=100; i<=999; i++) {
	//得到百位数
	var a = parseInt(i / 100);
	//得到十位数
	var b = parseInt( (i % 100) / 10);
	//得到个位数
	var c = i % 10;
	     
	//计算三个数字的三次方是否等于i,如果是打印出来
	if (a*a*a + b*b*b + c*c*c == i) {
		console.log(i);    
	}     
}  

13.利用条件运算符的嵌套来完成此题：学习成绩>=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。
//利用条件运算符的嵌套来完成此题：学习成绩>=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。
/*
思考:条件运算符的嵌套指的是什么: 指的是三目运算符 ? : ;

*/
var s = 60;
var r = s>=90 ? 'a' : s>=60 && s<=89 ? 'b' : 'c';
console.log(r);

14.输入两个正整数m和n，求其最大公约数和最小公倍数。
//14.输入两个正整数m和n，求其最大公约数和最小公倍数。
/*
分析:
最大公约数:就是两个数都能被整除的最大的整数 
最小公倍数:就是两个数整数的最小的数 比如 3 和 6 最小公倍数是6  
如果m = n, 最大公约数和最小公倍数就是他们自身(不用这一步)
如果m >= n, 最大公约数就从n开始--找,同时被两个数整除就是最大公约数,最大公倍数从m开始++,最大值就是两个值想成,如果能整数这两个数就是最小公倍数
如果m < n,就把m和n的值调换,哈哈
*/
function getNumber(m, n) {
	if (m < n) {
		var emp = m;
		m = n;
		n = emp;		
	} 
		//计算最大公约数
	for (var i=n; i>0; i--) {
		if (m%i===0 && n%i===0){
			console.log('最大公约数:' + i);
			break;
		}    
	}
	//计算最小公倍数
	for (var i=m; i<=m*n; i++) {
		if (i%m===0 && i%n===0){
			console.log('最小共倍数:' + i);
			break;
		}
	}  
}


15.输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。
/*
分析:
1.要获得每个字符.charAt(下标)返回值是当前下标的字符
2.如何判断字符是什么类型的数据呢,比较Unicode码?
英文字母26个还要分大小写!!, 数字0-9, 空格' ',
3.for循环获得每个字符,从0开始.长度length-1
4.在循环中再依次判断是否是字母,数字或者空格. 其它字符=总长度 减去字母数字空格
*/
var english = 'ascdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', englishCount = 0;
var number = '0123456789', numberCount = 0;
var kongge = ' ', kongeCount = 0;
var str = 'd A*(2  3&*';          
//声明一个变量保存当前的字符
for (var i=0,now=''; i<str.length; i++) {
	//当前的字符就是
	now = str.charAt(i);
	//判断是否是英文字母
	for (var j=0; j<english.length; j++) {
		 if (english.charAt(j) === now) {
			englishCount++;
			break;
		 }  
	}
	//判断是否是数字
	for (var k=0; k<number.length; k++) {
		 if (number.charAt(k) === now) {
			numberCount++;
			break;
		 }
	}
	//判断是否是空格
	if (now === kongge) {
		kongeCount++;
	}
}
console.log(englishCount, numberCount, kongeCount,str.length - englishCount - numberCount -kongeCount);

16.求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。
//16.求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。
/*
分析:
延伸知识  x的y次幂  Math.pow(x, y)
方法1:
1.设置函数,参数有两个, a一个数字, n 几个数相加
2.计算第n个数的数值, 使用递归 (n-1)的值 + a*(10的n-1次方)
3.使用循环机上1-n的值得和
总结: 这个方法太傻, 而且递归已经被淘汰啦
*/
function getSum(a, n) {
	for (var i=1, sum=0; i<=n; i++) {
		sum += getNumber(a, i);
	}
	return sum;
} 
//得到第n个数的值
function getNumber(a, n) {
	if (n === 1) {
		return a;
	}
	return getNumber(a, n-1) + a*Math.pow(10, n-1)
} 
console.log(getSum(2, 4));

/*   
分析:
延伸知识  x的y次幂  Math.pow(x, y)
方法2: 
假设a, n=3
结果 = a + (a*10+a) + (a*100+a*10+a)
	 = 3a + 2a*10 + a*100
	 = 3a*10^0 + 2a*10^1 + a*10^2
	 = a(3*10^0 + 2*10^1 + *10^2)
使用循环 循环次数是n次 计算括号内的值
i  n  值
0  3   3*Math(10,0) 
1  3   2*Math(10,1) 
2  3   1*Math(10,2) 
i  n   (n-i)*Math(10,i)       
最后结果是上面的值得和*a
*/
function getSum2(a, n) {
	for (var i=0, sum=0; i<n; i++) {
		sum += (n - i) * Math.pow(10, i) 
	}
	return sum * a;     
}

console.log(getSum2(2, 4));

/*
方法3:厉害,就是循环,得到第n位数字,n位数字以及之前的数的和
n	now				sum				第二个n和第一个n变化的值c
1	a				a				0
2	a+a*10			a+a*10+a		a*10
	now+c			sum+now			c=a*10的n次方    就是每次*10
*/
function getSum(a, n) {
	var now = 0, sum =0;
	for (var i=1; i<=n; i++) 
		now += a;
		sum += now;
		//每次变化增加的值是 a*10的n次方
		a *= 10;
	}
	return sum;  
}
console.log(getSum(2, 4));

17.一个数如果恰好等于不包含它自身的因子之和，这个数就称为“完数”。例如6=1＋2＋3.编程找出1000以内的所有完数。
/*
分析:
因子:就是所有能被数字整除的数
一个数的最大因子(除了他自身)不会超过它的一半!!!!! 偶数2*它的一半 奇数 能整除的最大的数必然小于它的一半
*/
//每个数判断是不是完数,从2开始
for (var i=1; i<=1000; i++) {
	//所有能被自己整数的数的和(不包括自己) = 自己就是完数 打印
	for (var j=1, sum=0; j<i/2; j++) {
		if (i % j === 0) {
			//计算因子之和
			sum += j;  
		}        
	}
	//如果它的因子的和=它自己就是完数
	if (sum === i) {
		console.log(i);
	}
	
}

18.一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？
//球第一次落地, 弹起高度 = 100/2  ,经过距离 100
//第2次落地之后 弹起高度 = 100/2/2 , 经过距离 100 + 第一次弹起高度 
//设置变量保存第一次落地经过的距离和弹起高度
let s = 100, hight = 100 / 2;
//从第二次开始循环
for (let i = 2; i<=10 ; i++) {
	s += hight * 2;       
	hight /= 2;
}
console.log(s, hight);  //299.609375  0.09765625

19.猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。
//第十天吃之前 1
//第九天吃之前 (1+1)*2
//第八天吃之前 ((1+1)*2+1)*2
//第十天可以求第九天的值
//声明变量保存第十天桃子个数
let count = 1;
for (let i=10; i>1; i--) {
	count = (count + 1) * 2;
}
console.log(count);//1534

20.两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。


21.有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前20项之和。
//分子分母都是前两项的分子或者分母的和
//计算第n项的值
function getNum(n) {
	//保存初始值,
	let fz1 = 2, fz2 = 3;
	let fm1 = 1, fm2 = 2;
	//当 n = 1 的时候
	if (n === 1) {
		return fz1 / fm1;
	} else {
		//使用两个变量依次向右移动一位的方法,这个适用于第三位数和前两位相关
		let tmp;
		for (let i=3; i<=n; i++) {//从第三个数开始算, 第二个数不执行循环,直接返回
			tmp = fz1;
			fz1 = fz2;
			fz2 = tmp + fz2;
			tmp = fm1;
			fm1 = fm2;
			fm2 = tmp + fm2;
		}
		return fz2 / fm2; //
	}
	
}

let sum = 0;

for (let i=1; i<=20; i++) {
	sum += getNum(i);
}

console.log(sum) //32.66026079864164

22.求1+2!+3!+...+20!的和
//!阶乘 n! = n * (n-1) * ... * 1
// 1 	2!      3!      4!
// 1!  1!*2    2!*3    3!*4
//方法1:使用递归可以计算n!
function jc(n) {
	//边界条件
	if (n === 1) {
		return 1;
	}
	return jc(n-1) * n;
}
let sum = 0;
for (let i=1; i<=20; i++) {
	sum += jc(i); 
}
console.log(sum);//2561327494111820300
//方法2 
//使用两个循环, 外层循环表示计算多少个数组, 内层循环得到当前数的阶乘
//声明变量保存和
let sum =0;
for (let i=1; i<=20; i++) {
	//声明变量保存当前的数的阶乘
	let jc = 1;
	for (let j=1; i<=i; j++) {
		jc *= j
	}
	sum += jc;
}
console.log(sum); //2561327494111820300

23.利用递归方法求5!。
function getJc(n) {
	if (n === 1) {
		return 1;
	}
	return getJc(n-1) * n;
}
console.log(getJc(5)); //120

//24.利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。
function dao(string) {
	if (string.length === 0) {
		return;
	}
	//打印当前字符串的最后一个字符
	console.log(string.substr(-1,1));
	//递归,字符串每次都减去最后一个字符
	return dao(string.substr(0, string.length-1));        
}
dao('abcde'); 


25.有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？
//递归或者循环
function age1(n) {
	if (n === 1) {
		return 10;
	}
	return age1(n-1) + 2;
}

console.log(age1(5));  //18

//第五个人可以求出第四个人的值,循环四次
let age = 10;
for (let i=1; i<5; i++) {
	age += 2;
}
console.log(age); //18


26.给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。
//转为字符串
let number = 12345;
let string = number.toString();
//几位数
console.log(`它是${string.length}位数`);
//创建一个新字符串
let string1 = '';
for (let i=1; i<=string.length; i++) {
	//截取最后一个字符给新字符串
	string1 += string.substr(-i,1);
}
console.log(string1);


27.一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。
//获得个十千万位置上的数字
//万位数
let num = 12321;
//万
let wan = parseInt(num / 10000);
//千
let qian = parseInt(num / 1000) % 10;
//十
let shi = parseInt(num / 10) % 10;
//个
let ge =  num % 10;

if (wan===ge && qian===shi) {
	console.log(true);
} else {
	console.log(false);
}        


28.请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。
//声明一个数组来保存留个字符串
let array = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
let day;
//声明一个数组来保存可能的星期几
let dayArray = [];
//当前比较第几个字符
let index = 0;
do {
	day = prompt('输入一个字母');   
	//把当前字母和数组中每一个元素的第一个字母比较
	for (let i=0; i<array.length; i++) {
		//如果有相等就把元素放入一个临时数组
		if (day === array[i].substr(index,1)) {
			dayArray.push(array[i]);
		}	    
	}   
	//然后将临时数组赋值给星期数组
	array = dayArray;
	//然后把临时数组再清零
    dayArray = [];  
	//下一次比较的时候就比较第二个字符
	index++;      
} while (array.length > 1); //当有字符相同的元素大于一个的时候就需要输入第二个字符来比较
//最后只剩下一个元素的数组就是想输入的星期几了
alert(`您想输入的是星期${array[0]}吧`);  


29.对10个数进行排序
//将十个数放入数组,使用sort((a, b) => a-b)升序 sort((a, b) => b-a)降序

30.求一个3*3矩阵对角线元素之和
//30.求一个3*3矩阵对角线元素之和
//假设矩阵为
// 1  2  3
// 4  5  6 
// 7  8  9
//使用二维数组储存矩阵
//[[1, 2, 3]
// [4, 5, 6]
// [7, 8, 9]] 
//对角线的元素就是[0][0], [1][1], [2][2]
//和[0][2], [1][1], [2][0]
//对角线元素有两行.一行是两个下标相同,一行是两个下标和为数组长度-1
//当矩阵是偶数的时候,两行对角线元素不会相交
let arr = [
	[1, 2, 3],
	[4, 5, 6],
	[7, 8, 9]
];
//对角线1
let sum = 0;
for (let i=0; i<arr.length; i++) {
	for (let j=0; j<arr.length; j++) {
		if (i === j) {
		 sum += arr[i][j];
		}
	}
}
//对角线2
let sum2 = 0;
for (let i=0; i<arr.length; i++) {
	for (let j=0; j<arr.length; j++) {
		if ((i+j===arr.length-1) && (i!==j) ) { // i!==j  表示当数组是奇数数组的时候不再加对角线相交的那个元素
		 sum2 += arr[i][j];
		}
	}
}
console.log(sum + sum2);


31.有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。
32.将一个数组逆序输出。
33.打印出杨辉三角形（要求打印出10行如下图）
34.输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。
35.有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数
36.有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。
37.写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。
38.编写一个函数，输入n为偶数时，调用函数求1/2+1/4+...+1/n,当输入n为奇数时，调用函数1/1+1/3+...+1/n
39.海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？
40.809*??=800*??+9*??+1其中??代表的两位数,8*??的结果为两位数，9*??的结果为3位数。求??代表的两位数，及809*??后的结果。
41.八进制转换为十进制
42.求0―7所能组成的奇数个数。
43.一个偶数总能表示为两个素数之和。
44.判断一个素数能被几个9整除
45.某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换

